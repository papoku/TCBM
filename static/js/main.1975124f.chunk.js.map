{"version":3,"sources":["components/Header.js","helpers/helpers.js","components/GoogleMapAPI.js","components/Notification.js","components/Map.js","App.js","index.js"],"names":["withStyles","root","flexGrow","appbar","alignItems","props","classes","react_default","a","createElement","className","AppBar_default","position","color","Toolbar_default","Typography_default","variant","content","latestDataset","API_ROUTE_URL","concat","API_SHAPE_URL","API_TRIP_URL","getRoutes","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","axios","get","sent","data","latest","t0","alert","abrupt","stop","apply","this","arguments","getShape","routeId","getTrip","shapeId","getVehicleLocation","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","Map","extend","openPopup","popup","_popup","addLayer","fire","style","width","height","GoogleMapAPI","mapCreator","_this","layergroup","clearLayers","then","jsondata","vehicles","VehiclRealTimeLocations","allMarkers","allPopups","vehicle","routes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","route","result","hasOwnProperty","publishedlinename","lineNumber","push","marker","latitude","longitude","bindPopup","popupContent","originname","destinationname","autoClose","keepInView","closeOnClick","setLatLng","setContent","length","popUps","undefined","Symbol","iterator","done","value","trip_id","__tripref","shape_id","return","finish","_x","shapes","createShape","timer","setTimeout","catch","error","window","dispatchEvent","CustomEvent","detail","message","clearTimer","map","center","zoom","layers","tileLayer","attribution","prevProps","clearTimeout","origin","destination","shape","shapeArray","coordinates","lat","lon","drawShape","polyline","weight","stroke","smoothFactor","addTo","featureGroup","eachLayer","layer","fitBounds","getBounds","id","Component","Notification","context","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onClosed","setState","notificationMessage","addEventListener","onNotification","bind","assertThisInitialized","state","event","notificationText","base","top","bottom","left","transform","styles","getNotificationStyle","Snackbar_default","open","autoHideDuration","onClose","ContentProps","aria-describedby","action","Button_default","key","size","onClick","React","handleChange","index","selected","target","_this2","status","TextField_default","select","label","onChange","SelectProps","MenuProps","menu","helperText","margin","option","MenuItem_default","route_id","route_short_name","route_long_name","components_GoogleMapAPI","components_Notification","theme","container","display","flexWrap","App","components_Header","components_Map","callback","handlechange","ReactDOM","render","src_App","document","getElementById"],"mappings":"8UAqCeA,2BA9BA,CACbC,KAAM,CACJC,SAAU,GAEZC,OAAQ,CACNC,WAAY,WAyBDJ,CArBf,SAAgBK,GAAO,IACXC,EAAYD,EAAZC,QAEV,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQL,MACtBM,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQE,UAAWJ,EAAQH,OAAQS,SAAS,SAASC,MAAM,WACzDN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,KACED,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAYQ,QAAQ,KAAKH,MAAM,WAC5BR,EAAMY,4FCtBfC,EAAc,GAEZC,EAAa,gCAAAC,OAAmCF,EAAnC,WACbG,EAAa,gCAAAD,OAAmCF,EAAnC,gBACbI,EAAY,gCAAAF,OAAmCF,EAAnC,WAILK,EAAS,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAnB,EAAAoB,KAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAnB,EAAAuB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEMC,IAAMC,IAThB,iCAOI,OAEXN,EAFWE,EAAAK,KAGjBnB,EAAgBY,EAASQ,KAAKC,OAHbP,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,SAMjBS,MAAK,+BAAArB,OAAAY,EAAAQ,KANY,eAAAR,EAAAU,OAAA,SAQdP,IAAMC,IAAIjB,IARI,yBAAAa,EAAAW,SAAAd,EAAA,iBAAH,yBAAAL,EAAAoB,MAAAC,KAAAC,YAAA,GAYTC,EAAW,SAACC,GACjB,OAAOA,GAAWb,IAAMC,IAAN,GAAAhB,OAAaC,EAAb,KAAAD,OAA8B4B,KAI3CC,EAAU,SAACC,GACpB,OAAOA,GAAWf,IAAMC,IAAN,GAAAhB,OAAaE,EAAb,KAAAF,OAA6B8B,KAItCC,EAAqB,WAC9B,OAAOhB,IAAMC,IA1BgB,gECH1BgB,IAAEC,KAAKC,QAAQC,UAAUC,YAGhCJ,IAAEC,KAAKC,QAAQG,aAAa,CACxBC,cAAeC,EAAQ,KACvBC,QAASD,EAAQ,KACjBE,UAAWF,EAAQ,OAIvBP,IAAEU,IAAMV,IAAEU,IAAIC,OAAO,CACjBC,UAAW,SAAUC,GAEjB,OADApB,KAAKqB,OAASD,EACPpB,KAAKsB,SAASF,GAAOG,KAAK,YAAa,CAC1CH,MAAOpB,KAAKqB,YAKxB,IAAMG,EAAQ,CACVC,MAAO,OACPC,OAAQ,SA8JGC,6MA/GXC,WAAa,WACTC,EAAKC,YAAcD,EAAKC,WAAWC,cACnCzB,IACK0B,KADL,eAAArD,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAnB,EAAAoB,KACU,SAAAC,EAAOiD,GAAP,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAlC,EAAAmC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA/D,EAAAnB,EAAAuB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACI6C,EAAWD,EAASxC,KAAKqD,OAAOZ,SAChCC,EAA0B,GAC1BC,EAAa,GACbC,EAAY,IAEdH,EANF,CAAA/C,EAAAE,KAAA,QAOE,IAAWiD,KAAWJ,EACdA,EAASI,GAASS,eAAe,sBAC7Bb,EAASI,GAASU,oBAAsBnB,EAAKrE,MAAMyF,aAGnDb,EAAWc,KAAK3C,IAAE4C,OAAO,CAACjB,EAASI,GAASc,SAAUlB,EAASI,GAASe,YACnEC,UAAUzB,EAAK0B,aAAarB,EAASI,GAASkB,WAAYtB,EAASI,GAASmB,iBAAkB,CAAEC,WAAW,KAGhHrB,EAAUa,KAAK3C,IAAEa,MAAM,CAAEuC,YAAY,EAAMD,WAAW,EAAOE,cAAc,IACtEC,UAAU,CAAC3B,EAASI,GAASc,SAAUlB,EAASI,GAASe,YACzDS,WAAWjC,EAAKrE,MAAMyF,aAE3Bd,EAAwBe,KAAKhB,EAASI,KApBpDnD,EAAAE,KAAA,oBA0BQ,uBA1BR,cA4BFwC,EAAKsB,OAA+B,IAAtBf,EAAW2B,OAAe3B,EAAaP,EAAKsB,OAC1DtB,EAAKmC,OAAS3B,EA7BZlD,EAAAE,KAAA,GAgCmBa,EAAS2B,EAAKrE,MAAM2C,SAhCvC,aAgCIoC,EAhCJpD,EAAAK,OAkC+C,IAAnC2C,EAAwB4B,OAlCpC,CAAA5E,EAAAE,KAAA,SAmCMgB,EAAU,GAnChBmC,GAAA,EAAAC,GAAA,EAAAC,OAAAuB,EAAA9E,EAAAC,KAAA,GAAAuD,EAoCsBJ,EAAO9C,KApC7ByE,OAAAC,YAAA,WAAA3B,GAAAI,EAAAD,EAAAtD,QAAA+E,KAAA,CAAAjF,EAAAE,KAAA,aAoCawD,EApCbD,EAAAyB,OAqCgBC,UAAYnC,EAAwB,GAAGoC,UArCvD,CAAApF,EAAAE,KAAA,gBAsCUgB,EAAUwC,EAAM2B,SAtC1BrF,EAAAU,OAAA,oBAAA2C,GAAA,EAAArD,EAAAE,KAAA,iBAAAF,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAQ,GAAAR,EAAA,UAAAsD,GAAA,EAAAC,EAAAvD,EAAAQ,GAAA,QAAAR,EAAAC,KAAA,GAAAD,EAAAC,KAAA,GAAAoD,GAAA,MAAAG,EAAA8B,QAAA9B,EAAA8B,SAAA,WAAAtF,EAAAC,KAAA,IAAAqD,EAAA,CAAAtD,EAAAE,KAAA,eAAAqD,EAAA,eAAAvD,EAAAuF,OAAA,mBAAAvF,EAAAuF,OAAA,mBAAAvF,EAAAU,OAAA,SA0CSO,EAAQC,IA1CjB,aA6CQ,0BA7CR,yBAAAlB,EAAAW,SAAAd,EAAA,qCADV,gBAAA2F,GAAA,OAAAhG,EAAAoB,MAAAC,KAAAC,YAAA,IAiDK+B,KAAK,SAAC4C,GAEH/C,EAAKgD,YAAYD,GACjB/C,EAAKiD,MAAQC,WAAWlD,EAAKD,WAAY,QAI5CoD,MAAM,SAACC,GACJC,OAAOC,cAAc,IAAIC,YAAY,eAAgB,CAAEC,OAAQ,CAAEC,QAASL,MAC1EpD,EAAK0D,mGAhGbvF,KAAKwF,IAAMjF,IAAEiF,IAAI,MAAO,CACpBC,OAAQ,CAAC,QAAS,SAClBC,KAAM,GACNC,OAAQ,CACJpF,IAAEqF,UAAU,0CAA2C,CACnDC,YACI,gFAMhB7F,KAAKmD,OAAS5C,IAAE4C,OAAO,CAAC,QAAS,qDAGlB2C,GACX9F,KAAKxC,MAAMyF,aAAe6C,EAAU7C,aACpCjD,KAAKuF,aACLvF,KAAK4B,6DAMT5B,KAAKuF,kDAKDvF,KAAK8E,QACLiB,aAAa/F,KAAK8E,OAClB9E,KAAK8E,MAAQ,2CA0ERkB,EAAQC,GACjB,+BAAA1H,OAAgCyB,KAAKxC,MAAMyF,WAA3C,0CAAA1E,OAC0ByH,EAD1B,+CAAAzH,OAE+B0H,uCAIvBC,GACR,IAAMC,EAAaD,EAAMzG,KAAK+F,IAAI,SAACY,GAC/B,MAAO,CAACA,EAAYC,IAAKD,EAAYE,OAGzCtG,KAAKuG,UAAUJ,qCAITA,GAGNnG,KAAKwG,SAAWjG,IAAEiG,SAASL,EAAY,CAAEM,OAAQ,EAAGC,QAAQ,EAAMC,aAAc,EAAG3I,MAAO,QAAS4I,MAAM5G,KAAKwF,KAG9GxF,KAAK8B,WAAavB,IAAEsG,aAAa7G,KAAKmD,QACjC7B,SAAStB,KAAKwG,UACdI,MAAM5G,KAAKwF,KAGhBxF,KAAK8B,WAAWgF,UAAU,SAAUC,GAChCA,EAAM5F,cAILnB,KAAK8E,OACN9E,KAAKwF,IAAIwB,UAAUhH,KAAK8B,YAAc9B,KAAK8B,WAAWmF,8CAK1D,OAAOvJ,EAAAC,EAAAC,cAAA,OAAKsJ,GAAG,MAAM1F,MAAOA,WAnJT2F,yDCiCZC,cA3DX,SAAAA,EAAY5J,EAAO6J,GAAS,IAAAxF,EAAA,OAAAjD,OAAA0I,EAAA,EAAA1I,CAAAoB,KAAAoH,IACxBvF,EAAAjD,OAAA2I,EAAA,EAAA3I,CAAAoB,KAAApB,OAAA4I,EAAA,EAAA5I,CAAAwI,GAAAK,KAAAzH,KAAMxC,EAAO6J,KAiBjBK,SAAW,WACP7F,EAAK8F,SAAS,CAAEC,oBAAqB,MAhBrC1C,OAAO2C,iBAAiB,eAAgBhG,EAAKiG,eAAeC,KAApBnJ,OAAAoJ,EAAA,EAAApJ,QAAAoJ,EAAA,EAAApJ,CAAAiD,MACxCA,EAAKoG,MAAQ,CACTL,oBAAqB,IALD/F,8EAUbqG,GACX,IAAIC,EAAmBD,EAAM7C,OAAOC,QAChC6C,GACAnI,KAAK2H,SAAS,CAAEC,oBAAqBO,mDAWzC,MAAO,CACHC,KAAM,CACFC,IAAK,MACLC,OAAQ,OACRC,KAAM,MACNC,UAAWxI,KAAKiI,MAAML,oBAAsB,0BAA4B,iEAMhF,IAAMa,EAASzI,KAAK0I,uBAEpB,OACIhL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC+K,EAAAhL,EAAD,CACI6D,MAAOiH,EAAOL,KACdQ,OAAQ5I,KAAKiI,MAAML,oBACnBiB,iBAAkB,IAClBC,QAAS9I,KAAK0H,SACdqB,aAAc,CACVC,mBAAoB,cAExB1D,QAAS5H,EAAAC,EAAAC,cAAA,QAAMsJ,GAAG,cAAclH,KAAKiI,MAAML,qBAC3CqB,OAAQ,CACJvL,EAAAC,EAAAC,cAACsL,EAAAvL,EAAD,CAAQwL,IAAI,OAAOnL,MAAM,YAAYoL,KAAK,QAAQC,QAASrJ,KAAK0H,UAAhE,oBAnDG4B,IAAMnC,WCgB3BlG,cACF,SAAAA,EAAYzD,EAAO6J,GAAS,IAAAxF,EAAA,OAAAjD,OAAA0I,EAAA,EAAA1I,CAAAoB,KAAAiB,IACxBY,EAAAjD,OAAA2I,EAAA,EAAA3I,CAAAoB,KAAApB,OAAA4I,EAAA,EAAA5I,CAAAqC,GAAAwG,KAAAzH,KAAMxC,EAAO6J,KAoBjBkC,aAAe,SAACrB,EAAOsB,GACnB3H,EAAK8F,SAAS,CACV8B,SAAUvB,EAAMwB,OAAOrF,MACvBlE,QAASqJ,EAAML,OArBnBtH,EAAKoG,MAAQ,CACT1F,OAAQ,GACRkH,SAAU,GACVtJ,QAAS,IANW0B,mFAUR,IAAA8H,EAAA3J,KAEhBtB,IAAYsD,KAAK,SAACO,GACdA,GAA4B,MAAlBA,EAAOqH,QACbD,EAAKhC,SAAS,CAAEpF,OAAQA,EAAO9C,SACpCuF,MAAM,SAACC,GAAD,OACLC,OAAOC,cAAc,IAAIC,YAAY,eAAgB,CAAEC,OAAQ,CAAEC,QAASL,yCAazE,IACGxH,EAAYuC,KAAKxC,MAAjBC,QACR,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,cACZH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACiM,EAAAlM,EAAD,CACIuJ,GAAG,2BACH4C,QAAM,EACNC,MAAM,SACNlM,UAAU,YACVwG,MAAOrE,KAAKiI,MAAMwB,SAClBO,SAAUhK,KAAKuJ,aACfU,YAAa,CACTC,UAAW,CACPrM,UAAWJ,EAAQ0M,OAG3BC,WAAW,yBACXC,OAAO,SACPlM,QAAQ,YAEP6B,KAAKiI,MAAM1F,QAAUvC,KAAKiI,MAAM1F,OAAOiD,IAAI,SAAA8E,GAAM,OAC9C5M,EAAAC,EAAAC,cAAC2M,EAAA5M,EAAD,CAAUwL,IAAKmB,EAAOE,SAAUnG,MAAOiG,EAAOG,kBACzCH,EAAOG,iBAAmB,MAAQH,EAAOI,qBAO1DhN,EAAAC,EAAAC,cAAC+M,EAAD,CAAc1H,WAAYjD,KAAKiI,MAAMwB,SAAUtJ,QAASH,KAAKiI,MAAM9H,UACnEzC,EAAAC,EAAAC,cAACgN,EAAD,cA7DEtB,IAAMnC,WAuEThK,uBAjFA,SAAA0N,GAAK,MAAK,CACrBC,UAAW,CACPC,QAAS,OACTC,SAAU,QAEdb,KAAM,CACF1I,MAAO,OA2EAtE,CAAmB8D,GCnEnBgK,mLAhBX,OACEvN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,IAChBH,EAAAC,EAAAC,cAACsN,EAAD,CAAQ9M,QAAQ,8CAElBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAACuN,EAAD,CAAKC,SAAUpL,KAAKqL,gBAEtB3N,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACsN,EAAD,CAAQ9M,QAAQ,uBAZR+I,aCKlBmE,IAASC,OAAO7N,EAAAC,EAAAC,cAAC4N,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.1975124f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  appbar: {\n    alignItems: 'center',\n  }\n};\n\nfunction Header(props) {\n    const { classes } = props;\n\n  return (\n    <div className={classes.root}>\n      <AppBar className={classes.appbar} position=\"static\" color=\"default\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            {props.content}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nHeader.propTypes = {\n  classes: PropTypes.object.isRequired,\n  text: PropTypes.string,\n};\n\nexport default withStyles(styles)(Header);","\nimport axios from 'axios';\nlet latestDataset='';\nconst API_GTFS_URL = \"https://data.foli.fi/gtfs/v0/\";\nconst API_ROUTE_URL = `https://data.foli.fi/gtfs/v0/${latestDataset}/routes`;\nconst API_SHAPE_URL = `https://data.foli.fi/gtfs/v0/${latestDataset}/trips/route`;\nconst API_TRIP_URL = `https://data.foli.fi/gtfs/v0/${latestDataset}/shapes`;\nconst API_VEHICLE_LOCATION_URL = \"https://data.foli.fi/siri/vm\";\n\n// fetch all active lines information, needs to be sync to show line details to user.\nexport const getRoutes = async () => {\n    try {\n        const response = await axios.get(API_GTFS_URL);\n        latestDataset = response.data.latest;\n    }\n    catch (error) {\n        alert(`API is not responsding !!\\n'${error}`);\n    }\n    return axios.get(API_ROUTE_URL);\n}\n\n// fetch the shape id of a route\nexport const getShape = (routeId) => {\n        return routeId && axios.get(`${API_SHAPE_URL}/${routeId}`);\n    }\n\n// fetch all the trips a line has for a day\nexport const getTrip = (shapeId) => {\n    return shapeId && axios.get(`${API_TRIP_URL}/${shapeId}`);\n}\n\n// fetch real time coordinates of a line\nexport const getVehicleLocation = () => {\n    return axios.get(API_VEHICLE_LOCATION_URL);\n\n}\n\n","import React, { Component } from 'react';\nimport { getShape, getTrip, getVehicleLocation } from '../helpers/helpers';\nimport L from \"leaflet\";\nimport 'leaflet/dist/leaflet.css';\ndelete L.Icon.Default.prototype._getIconUrl;\n\n// manually binding the icons path, lost the original path\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\n// extend layer class to open all popup\nL.Map = L.Map.extend({\n    openPopup: function (popup) {\n        this._popup = popup;\n        return this.addLayer(popup).fire('popupopen', {\n            popup: this._popup\n        });\n    }\n});\n\nconst style = {\n    width: \"100%\",\n    height: \"450px\"\n};\n\n/* \nDeliver map with chosesn line's route and \nactive loaitons\n*/\nclass GoogleMapAPI extends Component {\n\n    componentDidMount() {\n        // create map\n        this.map = L.map(\"map\", {\n            center: [60.4518, 22.2666],\n            zoom: 16,\n            layers: [\n                L.tileLayer(\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\", {\n                    attribution:\n                        '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                })\n            ]\n        });\n\n        // add a default marker\n        this.marker = L.marker([60.4518, 22.2666]);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.lineNumber !== prevProps.lineNumber) {\n            this.clearTimer();\n            this.mapCreator();\n        }\n    }\n\n    // delete time once component unmount\n    componentWillUnmount() {\n        this.clearTimer();\n    }\n\n    // clear any set timer to call function recursively\n    clearTimer() {\n        if (this.timer) {\n            clearTimeout(this.timer);\n            this.timer = null;\n        }\n    }\n\n    // update map according to the new line number received\n    mapCreator = () => {\n        this.layergroup && this.layergroup.clearLayers();\n        getVehicleLocation() // fetch all active lines first from API\n            .then(async (jsondata) => {\n                const vehicles = jsondata.data.result.vehicles;\n                const VehiclRealTimeLocations = [];\n                const allMarkers = [];\n                const allPopups = [];\n\n                if (vehicles) {\n                    for (const vehicle in vehicles) {\n                        if (vehicles[vehicle].hasOwnProperty('publishedlinename')) {\n                            if (vehicles[vehicle].publishedlinename === this.props.lineNumber) {\n\n                                // mark lines with corresponding coordinates\n                                allMarkers.push(L.marker([vehicles[vehicle].latitude, vehicles[vehicle].longitude])\n                                    .bindPopup(this.popupContent(vehicles[vehicle].originname, vehicles[vehicle].destinationname), { autoClose: false }));\n\n                                // create a popup sign for each line\n                                allPopups.push(L.popup({ keepInView: true, autoClose: false, closeOnClick: false })\n                                    .setLatLng([vehicles[vehicle].latitude, vehicles[vehicle].longitude])\n                                    .setContent(this.props.lineNumber));\n\n                                VehiclRealTimeLocations.push(vehicles[vehicle]);\n                            }\n                        }\n                    }\n\n                } else\n                    throw 'No Vehicles found !!';\n\n                this.marker = allMarkers.length !== 0 ? allMarkers : this.marker;\n                this.popUps = allPopups;\n\n                // fetch shape ID of the line\n                const routes = await getShape(this.props.routeId);\n\n                if (routes && VehiclRealTimeLocations.length !== 0) {\n                    let shapeId = '';\n                    for (const route of routes.data) {\n                        if (route.trip_id === VehiclRealTimeLocations[0].__tripref) {\n                            shapeId = route.shape_id;\n                            break;\n                        }\n                    }\n                    return getTrip(shapeId); // fetch the active trip this line has now\n                }\n                else\n                    throw 'No line is active now!!';\n\n            })\n            .then((shapes) => {\n                // shapes(routes) received for the line, draw in the map\n                this.createShape(shapes);\n                this.timer = setTimeout(this.mapCreator, 15000);\n\n\n            })\n            .catch((error) => {\n                window.dispatchEvent(new CustomEvent('notification', { detail: { message: error } }));\n                this.clearTimer();\n            }\n            );\n\n        //this.timer = setTimeout(this.mapCreator, 15000);\n\n    }\n\n    // Contetnt to show for popup\n    popupContent(origin, destination) {\n        return `<strong>Line:</strong>${this.props.lineNumber}<br>\n        <strong>Origin:</strong>${origin}<br>\n        <strong>Destination:</strong>${destination}`;\n    }\n\n    // Filter shape coordinates\n    createShape(shape) {\n        const shapeArray = shape.data.map((coordinates) => {\n            return [coordinates.lat, coordinates.lon];\n        });\n\n        this.drawShape(shapeArray);\n    }\n\n    // draws map\n    drawShape(shapeArray) {\n\n        // add pollyline for route\n        this.polyline = L.polyline(shapeArray, { weight: 5, stroke: true, smoothFactor: 1, color: 'red' }).addTo(this.map);\n\n        // put all map resosurces in a layergroup to remove at once later\n        this.layergroup = L.featureGroup(this.marker)\n            .addLayer(this.polyline)\n            .addTo(this.map);\n\n        // open all popup added in map\n        this.layergroup.eachLayer(function (layer) {\n            layer.openPopup();\n        });\n\n        // zoom the map to the polyline\n        if (!this.timer) {\n            this.map.fitBounds(this.layergroup && this.layergroup.getBounds());\n        }\n    }\n\n    render() {\n        return <div id=\"map\" style={style} />;\n    }\n}\n\nexport default GoogleMapAPI;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nclass Notification extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        // add event listener to listen for notification event\n        window.addEventListener('notification', this.onNotification.bind(this));\n        this.state = {\n            notificationMessage: ''\n        };\n    }\n\n    // Event when signal received to show\n    onNotification(event) {\n        var notificationText = event.detail.message;\n        if (notificationText) {\n            this.setState({ notificationMessage: notificationText });\n        }\n    }\n\n    // Handler to close notification\n    onClosed = () => {\n        this.setState({ notificationMessage: '' });\n    }\n\n    // styling for notification\n    getNotificationStyle() {\n        return {\n            base: {\n                top: \"10%\",\n                bottom: 'auto',\n                left: \"50%\",\n                transform: this.state.notificationMessage ? 'translate3d(-50%, 0, 0)' : 'translate3d(-50%, -50px, 0)'\n            },\n        };\n    }\n\n    render() {\n        const styles = this.getNotificationStyle();\n\n        return (\n            <div>\n                <Snackbar\n                    style={styles.base}\n                    open={!!this.state.notificationMessage}\n                    autoHideDuration={6000}\n                    onClose={this.onClosed}\n                    ContentProps={{\n                        'aria-describedby': 'message-id',\n                    }}\n                    message={<span id=\"message-id\">{this.state.notificationMessage}</span>}\n                    action={[\n                        <Button key=\"undo\" color=\"secondary\" size=\"small\" onClick={this.onClosed}>\n                            Close\n                        </Button>\n                    ]}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Notification;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport { getRoutes } from '../helpers/helpers';\nimport GoogleMapAPI from './GoogleMapAPI';\nimport Notification from './Notification';\n\n// styling of this component\nconst styles = theme => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    menu: {\n        width: 200,\n    },\n});\n\nclass Map extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            routes: [],\n            selected: '',\n            routeId: '',\n        }\n    }\n\n    componentDidMount() {\n        // fetch all active routes from Foli API\n        getRoutes().then((routes) => {\n            routes && routes.status === 200 &&\n                this.setState({ routes: routes.data });\n        }).catch((error) =>\n            window.dispatchEvent(new CustomEvent('notification', { detail: { message: error } }))\n        );\n    };\n\n    // handler to change state of textfiled\n    handleChange = (event, index) => {\n        this.setState({\n            selected: event.target.value,\n            routeId: index.key,\n        });\n    };\n\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div className={\"mapWrapper\"}>\n                <div>\n                    <TextField\n                        id=\"outlined-select-currency\"\n                        select\n                        label=\"Select\"\n                        className=\"textField\"\n                        value={this.state.selected}\n                        onChange={this.handleChange}\n                        SelectProps={{\n                            MenuProps: {\n                                className: classes.menu,\n                            },\n                        }}\n                        helperText=\"Please select your bus\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                    >\n                        {this.state.routes && this.state.routes.map(option => (\n                            <MenuItem key={option.route_id} value={option.route_short_name}>\n                                {option.route_short_name + ' - ' + option.route_long_name}\n                            </MenuItem>\n                        ))}\n\n                    </TextField>\n\n                </div>\n                <GoogleMapAPI lineNumber={this.state.selected} routeId={this.state.routeId} />\n                <Notification />\n            </div>\n        );\n    }\n}\n\nMap.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Map);","import React, { Component } from 'react';\nimport './css/App.css';\nimport Header from './components/Header';\nimport Map from './components/Map';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"\">\n          <Header content='Realtime Turku city bus location mapping' />\n        </header>\n        <div className=\"bodyWrapper\">\n          <Map callback={this.handlechange}/>\n        </div>\n        <footer>\n          <Header content='Copyright' />\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/*main page that renders\nwhen the site gets first hit */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}